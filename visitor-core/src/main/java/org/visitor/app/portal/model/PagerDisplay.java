/*
 * Generated by http://www.springfuse.com
 */
package org.visitor.app.portal.model;

import java.io.Serializable;
import java.util.List;

import org.codehaus.jackson.annotate.JsonIgnore;

/**
 * PagerDisplay encapsulates the meta information about pagination.
 * It should be used from the view (jsp, etc.) as a support to
 * some pagination tags.
 * 
 * 简单的分页类
 */
public class PagerDisplay<T> implements Serializable {
    static final private long serialVersionUID = 1L;

    private int pageSize;
    private int pageIndex; //从1开始
    private long totalSize;
    private List<T> items;
    /**
     * When using this constructor, make sure you call init()
     * to properly initialize it before using it in your view.
     */
    public PagerDisplay() {
    }

    /**
     * Construct a new PagerDisplay.
     *
     * @param pageSize the page size (number of element per page). Must be positive.
     * @param pageIndex the index of the page, also called page number (starting at 1).
     * @param totalSize the total number of element (must be positive or 0).
     */
    public PagerDisplay(int pageSize, int pageIndex, long totalSize, List<T> items) {
        init(pageSize, pageIndex, totalSize, items);
    }

    public void init (int pageSize, int pageIndex, long totalSize, List<T> items) {
        // basic argument validation
        if (pageSize < 1) {
            throw new IllegalArgumentException("pageSize must be > 0. Got: " + pageSize);
        }

        if (pageIndex < 1) {
            throw new IllegalArgumentException("pageIndex must > 0. Got: " + pageIndex);
        }

        if (totalSize < 0) {
            throw new IllegalArgumentException("totalSize must be >=0. Got: " + totalSize);
        }

        this.pageSize = pageSize;
        this.totalSize = totalSize;

        if (totalSize == 0) {
            this.pageIndex = 1;
        } else if (pageIndex > getTotalPages()) {
            this.pageIndex = getTotalPages();
        } else {
            this.pageIndex = pageIndex;
        }
        this.items = items;
    }

    /**
     * Returns the total number of data items.
     *
     * @return the total number of items.
     */
    public long getTotalSize() {
        return totalSize;
    }

    /**
     * The current page index. All indexes start at 1.
     *
     * @return the current page index.
     */
    public int getPageIndex() {
        return pageIndex;
    }

    /**
     * The number of items that are displayed per page.
     *
     * @return the number of items displayed per page.
     */
    public int getPageSize() {
        return pageSize;
    }

    /**
     * The total number of pages.
     *
     * @return the total number of pages
     */
    @JsonIgnore
    public int getTotalPages() {
        if (totalSize == 0) {
            return 1;
        }
        return (int)((totalSize - 1) / pageSize) + 1;
    }

    /* (non-Javadoc)
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return "PagerDisplay [pageSize=" + pageSize + ", pageIndex="
				+ pageIndex + ", totalSize=" + totalSize + ", items=" + items
				+ "]";
	}

	/**
	 * @return the items
	 */
	public List<T> getItems() {
		return items;
	}

	/**
	 * @param pageSize the pageSize to set
	 */
	public void setPageSize(int pageSize) {
		this.pageSize = pageSize;
	}

	/**
	 * @param pageIndex the pageIndex to set
	 */
	public void setPageIndex(int pageIndex) {
		this.pageIndex = pageIndex;
	}

	/**
	 * @param totalSize the totalSize to set
	 */
	public void setTotalSize(int totalSize) {
		this.totalSize = totalSize;
	}

	/**
	 * @param items the items to set
	 */
	public void setItems(List<T> items) {
		this.items = items;
	}
    
}
