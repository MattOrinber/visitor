<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings xmlns="http://java.sun.com/xml/ns/persistence/orm" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_2_0.xsd" version="2.0">
	<description><![CDATA[
		NOTE: You may override the JPA annotations of your Java entities in this file.
		This is also the standard place to declare your named queries.

		******************************************
		* ABOUT NAMED QUERIES and SearchTemplate *
		******************************************
        
		Named query integration is almost transparent, it is done using
		the generated services and searchTemplate.

		To execute a named query
		========================
		* Define a named query in this file (some example are provided) or via an annotation in your Entity class.

		* Pass the named query's name and the parameters, if any, to the searchTemplate:
		   searchTemplate.setNamedQuery("myNamedQuery");
		   searchTemplate.addParameter("paramName", paramValue);

		* Use the xxxService that handles the Xxx entity that the named query should return.
			 For example:
			   xxxService.find(searchTemplate) or
			   xxxService.find(xxxModel, searchTemplate)

			   xxxService.findCount(searchTemplate)
			   xxxService.findCount(xxxModel, searchTemplate)

		When you define your named query the following magic parameters
		will be automatically replaced:
		:currentAccountId ==> replaced with the id of the current account carried by
							  the AccountContext or -1 if not available
		:now			  ==> replaced with the current date
		:anyParameterName ==> replaced with the value with either
		   - the value of xxxModel.getAnyParameterName()
		   - the value returned by searchTemplate.getParameters().get("anyParameterName")

		Dynamic order By support:
		=========================
		If your named query's comment is set to "enableDynamicOrderBySupport"
		the query will be dynamically modified to take into account the orderBy
		information carried by the searchTemplate. This is extremely useful
		when rendering sortable data to the view.

		Dynamic Select count support:
		=============================
		Note that if you call xxxService.findCount(searchTemplate) and that your
		named query starts with "from" instead of "select", the "select count(*) "
		will be dynamically appended so it returns what you expect.
	]]></description>
</entity-mappings>