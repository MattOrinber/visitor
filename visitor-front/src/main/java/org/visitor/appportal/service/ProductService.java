/*
 * (c) Copyright 2005-2011 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend:src/main/java/project/manager/ManagerImpl.e.vm.java
 */
package org.visitor.appportal.service;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.codehaus.jackson.JsonGenerationException;
import org.codehaus.jackson.map.DeserializationConfig.Feature;
import org.codehaus.jackson.map.JsonMappingException;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.type.TypeReference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import org.visitor.app.portal.model.FolderRank.RankTypeEnum;
import org.visitor.app.portal.model.IntelligentItemRecommend;
import org.visitor.app.portal.model.Product;
import org.visitor.app.portal.model.ProductIntelligentRecommend;
import org.visitor.appportal.context.AccountContext;
import org.visitor.appportal.domain.Category;
import org.visitor.appportal.domain.Folder;
import org.visitor.appportal.domain.HtmlPage;
import org.visitor.appportal.domain.MessageContent;
import org.visitor.appportal.domain.PageContainer;
import org.visitor.appportal.domain.ProductContainer;
import org.visitor.appportal.domain.ProductContainerTask;
import org.visitor.appportal.domain.ProductDetail;
import org.visitor.appportal.domain.ProductDetail.RecommendStorageEnum;
import org.visitor.appportal.domain.ProductFile;
import org.visitor.appportal.domain.ProductFile.VersionOperatorEnum;
import org.visitor.appportal.domain.ProductList;
import org.visitor.appportal.domain.ProductOperation;
import org.visitor.appportal.domain.ProductPic;
import org.visitor.appportal.domain.ProductSiteFolder;
import org.visitor.appportal.domain.ProductSiteRecommend;
import org.visitor.appportal.domain.ProductState;
import org.visitor.appportal.domain.RecommendRule;
import org.visitor.appportal.domain.RecommendRule.RecommendRuleTypeEnum;
import org.visitor.appportal.domain.RecommendRuleAcross;
import org.visitor.appportal.domain.Site;
import org.visitor.appportal.domain.SiteValue.TypeEnum;
import org.visitor.appportal.redis.ProductRedisRepository;
import org.visitor.appportal.redis.RecommendRuleAcrossRedisRepository;
import org.visitor.appportal.redis.RedisKeys;
import org.visitor.appportal.redis.SiteRedisRepository;
import org.visitor.appportal.repository.AdvertiseRepository;
import org.visitor.appportal.repository.FolderRepository;
import org.visitor.appportal.repository.MessageContentRepository;
import org.visitor.appportal.repository.PageContainerRepository;
import org.visitor.appportal.repository.PictureRepository;
import org.visitor.appportal.repository.ProductContainerRepository;
import org.visitor.appportal.repository.ProductDetailRepository;
import org.visitor.appportal.repository.ProductFileRepository;
import org.visitor.appportal.repository.ProductListRepository;
import org.visitor.appportal.repository.ProductOperationRepository;
import org.visitor.appportal.repository.ProductPicRepository;
import org.visitor.appportal.repository.ProductSiteFolderRepository;
import org.visitor.appportal.repository.ProductSiteRecommendRepository;
import org.visitor.appportal.repository.ProductStateRepository;
import org.visitor.appportal.repository.RecommandContainerRepository;
import org.visitor.appportal.repository.RecommendRuleAcrossRepository;
import org.visitor.appportal.repository.RecommendRuleRepository;
import org.visitor.appportal.repository.SiteRepository;
import org.visitor.appportal.repository.SiteValueRepository;
import org.visitor.appportal.web.utils.EncryptionUtil;
import org.visitor.appportal.web.utils.HttpClientUtil;
import org.visitor.appportal.web.vo.ContainerPagesProducts;
import org.visitor.util.AppStringUtils;

/**
 * 
 * Default implementation of the {@link ProductService} interface
 * 
 * @see ProductService
 */
@Service("productService")
public class ProductService {

	private static final Logger logger = LoggerFactory.getLogger(ProductService.class);
	@Autowired
	private FolderRepository folderRepository;
	@Autowired
	private ProductListRepository productListRepository;
	@Autowired
	private ProductPicRepository productPicRepository;
	@Autowired
	private SiteRepository siteRepository;
	@Autowired
	private SiteValueRepository siteValueRepository;
	@Autowired
	private ProductFileRepository productFileRepository;
	@Autowired
	private ProductRedisRepository productRedisRepository;
	@Autowired
	private SiteRedisRepository siteRedisRepository;
	@Autowired
	private ProductSiteFolderRepository productSiteFolderRepository;
	@Autowired
	private ProductContainerRepository productContainerRepository;
	@Autowired
	private ProductStateRepository productStateRepository;
	@Autowired
	private SearchIndexService searchService;
	@Autowired
	private ProductOperationRepository productOperationRepository;
	@Autowired
	private MessageContentRepository messageContentRepository;
	@Autowired
	private ProductSiteRecommendRepository productSiteRecommendRepository;
	@Autowired
	private RecommendRuleRepository recommendRuleRepository;
	@Autowired
	private RecommendRuleAcrossRepository recommendRuleAcrossRepository;
	@Autowired
	private RecommendRuleAcrossRedisRepository recommendRuleAcrossRedisRepository;
	@Autowired
	private PictureRepository pictureRepository;
	@Autowired
	private AdvertiseRepository advertiseRepository;
	@Autowired
	SystemPreference systemPreference;
    @Autowired
    private PageContainerRepository pageContainerRepository;
    @Autowired
    private ApuService apuService;
	@Autowired
	private ProductDetailRepository productDetailRepository;
	@Autowired
	private	RecommandContainerRepository recommandContainerRepository;

	
	@Transactional
	public void saveProductWithCoverAndIcon(ProductList productList,
			ProductPic coverPic, ProductPic iconPic) {
		
		long page_total_dl = 0l;
		if (productList.getProductState() != null && productList.getProductState().getTotalDl() != null) {
			page_total_dl = productList.getProductState().getTotalDl();
		}

		productList.setProductState(null);
		productListRepository.save(productList);
		
		//页游设置
		ProductState state = getInitialProductState(productList.getProductId());
		if (productList.getProductType().intValue() == ProductList.ProductTypeEnum.PageGame.ordinal()) {
			if (page_total_dl == 0l) {
				page_total_dl = AppStringUtils.getRandomNumber(10000, 10000);
			}
			state = getInitialProductState(productList.getProductId(), page_total_dl);
		}
		
		productStateRepository.save(state);
		coverPic.setProduct(productList);
		productPicRepository.save(coverPic);
		iconPic.setProduct(productList);
		productPicRepository.save(iconPic);
		coverPic.setPicPath(ProductPic.getPath(coverPic.getPrimaryKey(), coverPic.getPicStyle()));
		productPicRepository.save(coverPic);
		iconPic.setPicPath(ProductPic.getPath(iconPic.getPrimaryKey(), iconPic.getPicStyle()));
		productPicRepository.save(iconPic);
		
		ProductOperation productOperation = AppStringUtils.getCreateOperation(productList, coverPic, iconPic);
		productOperation.setCreateBy(AccountContext.getAccountContext().getUsername());
		productOperationRepository.save(productOperation);
	}
	
	/**
	 * save product picture
	 * 
	 * @param name
	 * @param req
	 * @param productList
	 * @param type
	 */
	public void saveProductPic(Long productId, ProductPic productPic) {
		if(null != productPic.getPrimaryKey()) {//换图
			productPicRepository.save(productPic);
			ProductOperation productOperation = AppStringUtils.getChangePicOperation(productPic);
			productOperation.setCreateBy(AccountContext.getAccountContext().getUsername());
			productOperationRepository.save(productOperation);
		} else {
			ProductList productList = productListRepository.findOne(productId);
			productPic.setProduct(productList);
			productPicRepository.save(productPic);
			productPic.setPicPath(ProductPic.getPath(productPic.getPrimaryKey(), productPic.getPicStyle()));
			productPicRepository.save(productPic);
			ProductOperation productOperation = AppStringUtils.getSavePicOperation(productPic);
			productOperation.setCreateBy(AccountContext.getAccountContext().getUsername());
			productOperationRepository.save(productOperation);
		}
	}
	
	/**
	 * change the cover picture to the print screen
	 * @param newCover
	 */
	public void toCover(ProductPic newCover) {
		//将原始封面图改为截图
		List<ProductPic> olds = productPicRepository.findByProductIdAndPicType(newCover.getProductId(), ProductPic.COVER);
		ProductPic old = null;
		if (olds != null && olds.size() > 0) {
			old = olds.get(0);
			old.setPicType(ProductPic.PRINT_SCREEN);
			productPicRepository.save(old);
		}
		//新的封面图
		newCover.setPicType(ProductPic.COVER);
		productPicRepository.save(newCover);
		
		ProductOperation productOperation = AppStringUtils.getToCoverOperation(newCover, old);
		productOperation.setCreateBy(AccountContext.getAccountContext().getUsername());
		productOperationRepository.save(productOperation);
	}
	
	/**
	 * 更新产品信道到redis以及solr
	 * @param product
	 */
	public void updateProduct(Product product) {
		ProductList productList = product.getProductList();
		productRedisRepository.setProduct(productList.getProductId(), product);
		//搜索
		try {
			searchService.createIndex(product);
			logger.info("[redis] [update] ----> product:" + productList.getProductId().toString());
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("[redis] [update] ----> product:" + productList.getProductId().toString(), e);
		}
	}
	/**
	 * redis & search product update
	 */
	@Transactional
	public void setProduct2Redis(ProductList productList) {
		productList = productList.copy();
		if (productList.getDownStatus().equals(ProductList.ENABLE)) {
			
			Product product = new Product();
			product.setProductList(productList);
			
			//查找图片
			List<ProductPic> productPics = productPicRepository.getProductPics(productList.getProductId());
			List<ProductPic> printPics = new ArrayList<ProductPic>();
			if (productPics != null && productPics.size() > 0) {
				for (ProductPic p : productPics) {
					switch(p.getPicType()) { 
						case ProductPic.COVER : 
							product.setCoverPic(p); break; 
						case ProductPic.ICON :
							product.setIconPic(p); break; 
						case ProductPic.PRINT_SCREEN :
							printPics.add(p); break;
					}
				}
			}
			
			//截图
			productRedisRepository.setProductPics(productList.getProductId(), printPics);
			//文件
			List<ProductFile> productFiles = productFileRepository.findFileByProductIdAndStatus(productList.getProductId(), ProductFile.ENABLE);
			productRedisRepository.setProductFiles(productList.getProductId(), productFiles);
			this.setProductFileApkInfo(productFiles);

			List<ProductSiteFolder> psf = productSiteFolderRepository.findProductSiteFolders(productList.getProductId());
			
			product.setFolders(psf);
			product.setProductState(productStateRepository.findByProductId(productList.getProductId()));
			product.setProductFiles(productFiles);
			
			if(productList.getPublishDate() == null) {
				String userName = AccountContext.getAccountContext().getUsername();
				productList.setPublishDate(new Date());
				productList.setPublishBy(userName);
				this.productListRepository.save(productList);
				if (psf != null && psf.size() > 0) {
					for (ProductSiteFolder p : psf) {
						this.publishProductFirst(p);
					}
				}
				productRedisRepository.setProductState(String.valueOf(productList.getProductId()),
						RankTypeEnum.TotalDownload, product.getProductState().getTotalDl());
			}
			
			//发布推荐
			this.publishRecommendRuleToRedis(psf, productList.getProductId());
			//专题信息
			product.setDetailList(
				productDetailRepository.findByProductId(productList.getProductId())
			);
						
			updateProduct(product);
		} else {
			deleteProduct(productList);
		}
	}
	
	/**
	 * redis product update
	 */
	@Transactional
	public Product setProduct2Redis1(ProductList productList) {
		productList = productList.copy();
		if (productList.getDownStatus().equals(ProductList.ENABLE)) {
			
			Product product = new Product();
			product.setProductList(productList);
			
			List<ProductPic> productPics = productPicRepository.getProductPics(productList.getProductId());
			List<ProductPic> printPics = new ArrayList<ProductPic>();
			if (productPics != null && productPics.size() > 0) {
				for (ProductPic p : productPics) {
					switch(p.getPicType()) { 
						case ProductPic.COVER : 
							product.setCoverPic(p); break; 
						case ProductPic.ICON :
							product.setIconPic(p); break; 
						case ProductPic.PRINT_SCREEN :
							printPics.add(p); break;
					}
				}
			}
			
			//截图
			productRedisRepository.setProductPics(productList.getProductId(), printPics);
			//文件
			List<ProductFile> productFiles = productFileRepository.findFileByProductId(productList.getProductId());
			productRedisRepository.setProductFiles(productList.getProductId(), productFiles);
			this.setProductFileApkInfo(productFiles);
			
			List<ProductSiteFolder> psf = productSiteFolderRepository.findProductSiteFolders(productList.getProductId());
			
			product.setFolders(psf);
			product.setProductState(productStateRepository.findByProductId(productList.getProductId()));
			product.setProductFiles(productFiles);
			
			if(null == productList.getPublishDate()) {
				String userName = AccountContext.getAccountContext().getUsername();
				productList.setPublishDate(new Date());
				productList.setPublishBy(userName);
				productListRepository.save(productList);
				if (psf != null && psf.size() > 0) {
					for (ProductSiteFolder p : psf) {
						this.publishProductFirst(p);
					}
				}
				productRedisRepository.setProductState(String.valueOf(productList.getProductId()),
						RankTypeEnum.TotalDownload, product.getProductState().getTotalDl());
			}
			
			productRedisRepository.setProduct(productList.getProductId(), product);
			
			//发布推荐
			this.publishRecommendRuleToRedis(psf, productList.getProductId());
			
			logger.info("[redis] [update] ----> product:" + productList.getProductId().toString());
			return product;
		} else {
			deleteProduct(productList);
			return null;
		}
	}
	
	public Product getProductByProductList(ProductList productList) {
		Product product = new Product();
		if (productList.getDownStatus().equals(ProductList.ENABLE)) {
			product.setProductList(productList);
			List<ProductPic> productPics = productPicRepository.getProductPics(productList.getProductId());
			List<ProductPic> printPics = new ArrayList<ProductPic>();
			if (productPics != null && productPics.size() > 0) {
				for (ProductPic p : productPics) {
					switch(p.getPicType()) { 
						case ProductPic.COVER : 
							product.setCoverPic(p); break; 
						case ProductPic.ICON :
							product.setIconPic(p); break; 
						case ProductPic.PRINT_SCREEN :
							printPics.add(p); break;
					}
				}
			}
			//文件
			List<ProductFile> productFiles = productFileRepository.findFileByProductIdAndStatus(productList.getProductId(), ProductFile.ENABLE);
			List<ProductSiteFolder> psf = productSiteFolderRepository.findProductSiteFolders(productList.getProductId());
			product.setFolders(psf);
			product.setProductState(productStateRepository.findByProductId(productList.getProductId()));
			product.setProductFiles(productFiles);
			logger.info("[redis] [update] ----> product:" + productList.getProductId().toString());
		}
		return product;
	}
	
	/**
	 * search products update
	 * @param products
	 */
	public void setProducts2Search(List<Product> products){
		if (products != null && products.size() > 0) {
			searchService.createIndex(products);
			logger.info("[search] [update] ----> products:" + products.size() + "!");
		}
		products = null;
	}
	
	/**
	 * 首次发布更新最新列表
	 * @param productSiteFolder
	 */
	public void publishProductFirst(ProductSiteFolder productSiteFolder){
		this.publishNewProduct(productSiteFolder, productSiteFolder.getProduct().getCreateDate().getTime());
	}
	
	/**
	 * 更新最新列表
	 * @param productSiteFolder
	 */
	public void publishNewProduct(ProductSiteFolder productSiteFolder, Long sortOrder){
		List<String> match_res = matchVersionLevel(productSiteFolder);
		if (match_res != null && match_res.size() > 0) {
			//取得：频道所在站点下的所有平台版本
			Site s = productSiteFolder.getSite();
			ProductList productList = productSiteFolder.getProduct();
			productList.setProductState(productStateRepository.findByProductId(productSiteFolder.getProduct().getPrimaryKey()));
			for (String match : match_res) {
				Long versionId = Long.valueOf(match.split(" ")[0]);
				Integer level = Integer.valueOf(match.split(" ")[1]);
				productRedisRepository.setProductsBySiteRank(s.getSiteId(), productList.getProductId(),
						RankTypeEnum.NewUpdate, versionId, level, sortOrder);
				
				logger.info("[redis] [new] [update] ---->sid:" + productSiteFolder.getSiteId() 
				+ " fid:" + productSiteFolder.getFolderId()
				+ " pid:" + productSiteFolder.getProductId()
				+ " version:" + versionId
				+ " level:" + level);
			}
		}
	}
	
	/**
	 * redis & search product delete
	 * @param productList
	 */
	public void deleteProduct(ProductList productList) {

		productRedisRepository.deleteProduct(productList.getProductId());
		productRedisRepository.deleteProductPics(productList.getProductId());
		productRedisRepository.deleteProductFiles(productList.getProductId());
		
		//在产品所在的频道列表、排行中，删除该产品
		List<ProductSiteFolder> psf = productSiteFolderRepository.findProductSiteFolders(productList.getProductId());
		if (psf != null && psf.size() > 0) {
			for (ProductSiteFolder p : psf) {
				this.deleteFolderProduct(p);

				productRedisRepository.deleteIntelligentRecommend(p.getSiteId(), productList.getProductId());
				productRedisRepository.deleteProductRecommendBehaviors(p.getSiteId(), productList.getProductId());
				productRedisRepository.deleteProductRecommendSimilars(p.getSiteId(), productList.getProductId());
				productRedisRepository.deleteProductRecommendStorage(p.getSiteId(), productList.getProductId());
			}
		}
		List<String> productIds = new ArrayList<String>();
		productIds.add(productList.getProductId().toString());
		searchService.deleteIndex(productIds);
		
		
		logger.info("[redis] [delete] ----> product:" + productList.getProductId().toString());
	}
	
	/**
	 * redis product bind folder
	 * @param productSiteFolder
	 */
	public void redisAddFolderProduct(ProductSiteFolder productSiteFolder) {
		List<String> match_res = matchVersionLevel(productSiteFolder);
		if (match_res != null && match_res.size() > 0) {
			//取得：频道所在站点下的所有平台版本
			Site s = productSiteFolder.getSite();
			ProductList productList = productSiteFolder.getProduct();
			productList.setProductState(productStateRepository.findByProductId(productSiteFolder.getProduct().getPrimaryKey()));
			for (String match : match_res) {
				Long versionId = Long.valueOf(match.split(" ")[0]);
				Integer level = Integer.valueOf(match.split(" ")[1]);
				
				productRedisRepository.setProductSiteFolder(productSiteFolder, level, versionId);
				
				//添加至频道排行(dayDownload, weekDownload)
				productRedisRepository.setProductsByFolderRank(s.getSiteId(), productSiteFolder.getFolderId() , productList.getProductId(),
						RankTypeEnum.DailyDownload, versionId, level, productList.getProductState().getDailyDl());
				
				productRedisRepository.setProductsByFolderRank(s.getSiteId(), productSiteFolder.getFolderId() , productList.getProductId(),
						RankTypeEnum.WeekDownload, versionId, level, productList.getProductState().getWeekDl());

				productRedisRepository.setProductsByFolderRank(s.getSiteId(), productSiteFolder.getFolderId() , productList.getProductId(),
						RankTypeEnum.MonthDownload, versionId, level, productList.getProductState().getMonthDl());

				//添加至站点排行(dayDownload, weekDownload, monthDownload)
				productRedisRepository.setProductsBySiteRank(s.getSiteId(), productList.getProductId(),
						RankTypeEnum.DailyDownload, versionId, level, productList.getProductState().getDailyDl());
				
				productRedisRepository.setProductsBySiteRank(s.getSiteId(), productList.getProductId(),
						RankTypeEnum.WeekDownload, versionId, level, productList.getProductState().getWeekDl());
				
				productRedisRepository.setProductsBySiteRank(s.getSiteId(), productList.getProductId(),
						RankTypeEnum.MonthDownload, versionId, level, productList.getProductState().getMonthDl());
			}
		}
	}
	
	/**
	 * 匹配产品 平台版本 + 分辨率级别
	 * @param productSiteFolder
	 * @return
	 */
	public List<String> matchVersionLevel(ProductSiteFolder productSiteFolder){
		if (productSiteFolder.getProduct().getDownStatus().compareTo(ProductList.ENABLE) == 0) {
			List<String> res = new ArrayList<String>();
			//取得：频道所在站点下的所有平台版本
			Site s = productSiteFolder.getSite();
			List<Category> versions = siteValueRepository.getSiteValueCategory(productSiteFolder.getSiteId(), TypeEnum.PlatformVerion.getValue());

			List<ProductFile> files = productFileRepository.findFileByProductId(productSiteFolder.getProductId());

			//处理频道产品适配列表
			if (versions != null && versions.size() > 0 && files != null && files.size() > 0) {
				
				List<String> keyList = new ArrayList<String>();
				Integer level = null;
				String key_folder = "";
				/*
				 * 分页因子：平台版本  + 分辨率 + 分页信息
				 */
				//循环处理每个平台版本
				for (Category c : versions) {
					// 循环处理每级分辨率
					for (ProductFile file : files) {
						if (file.getPlatformId().compareTo(c.getParentCategoryId()) == 0) {
							if (validatePlatformVersion(c, file)){
								level = siteRedisRepository.getScreenSizeLevel(c,file.getScreenSize());
								if(null != level) {
									for(int i=1;i<level + 1;i++) {
										try {
											key_folder = RedisKeys.getPageableProductKey(s.getSiteId(), productSiteFolder.getFolderId(), String.valueOf(c.getCategoryId()), String.valueOf(i));
											if (!keyList.contains(key_folder)){
												keyList.add(key_folder);
												res.add(c.getCategoryId().toString() + " " + String.valueOf(i));
											}
										}catch (Exception e) {
											e.printStackTrace();
											logger.error("[redis] [add folder] [fail] ----> product:" + productSiteFolder.getProductId().toString(), e);
										}
									}
								}
							}
						}
					}
				}
				keyList = null;
			}
			versions = null;
			files = null;
			return res;
		}
		return null;
	}

	public boolean validatePlatformVersion(Category version, ProductFile file) {
		if (file.getVersionOperator() != null && version != null && version.getSortOrder()!=null) {
			try {
				return (VersionOperatorEnum.GE.getDisplayName().equals(file.getVersionOperator())
					&& file.getPlatformVersion().getSortOrder().compareTo(version.getSortOrder()) <= 0)
					|| (VersionOperatorEnum.EQ.getDisplayName().equals(file.getVersionOperator())
						&& file.getPlatformVersion().getSortOrder().compareTo(version.getSortOrder()) == 0)
					|| (VersionOperatorEnum.LE.getDisplayName().equals(file.getVersionOperator())
						&& file.getPlatformVersion().getSortOrder().compareTo(version.getSortOrder()) >= 0);
			}catch (Exception e) {
				logger.error(e.getMessage(), e);
			}
			return true;
		} else {
			return true;
		}

	}
	
	public void deleteFolderProduct(ProductSiteFolder productSiteFolder){
		//取得：频道所在站点下的所有平台版本
		Site s = productSiteFolder.getSite();
		ProductList productList = productSiteFolder.getProduct();
		
		//删除频道排行(dayDownload, weekDownload)
		productRedisRepository.deleteProductsByFolderRank(s.getSiteId(), productSiteFolder.getFolderId() , productList.getProductId());
		productRedisRepository.deleteProductSiteFolder(productSiteFolder);
		
		//删除站点排行(dayDownload, weekDownload)
		productRedisRepository.deleteProductsBySiteRank(s.getSiteId(), productList.getProductId());
		
		List<String> pids = new ArrayList<String>();
		pids.add(productList.getProductId().toString());
		searchService.deleteIndex(pids);
	}

	public ContainerPagesProducts findProductsByContainerAndPage(Long containerId, Long pageId) {

		ContainerPagesProducts containerPagesProducts = new ContainerPagesProducts();

		PageContainer pageContainer = pageContainerRepository.findByContainerIdAndPageId(containerId, pageId);
		
		containerPagesProducts.setSite(siteRepository.findOne(pageContainer.getSiteId())); // site
		containerPagesProducts.setFolders(folderRepository.findFolderBread(pageContainer.getFolderId())); // folders
		
		containerPagesProducts.setProductContainers(
				productContainerRepository.findByPageIdAndContainerId
				(pageId, containerId, new Sort(new Sort.Order(Direction.DESC, "sortOrder"))));
		
		containerPagesProducts.setPageContainer(pageContainer);

		return containerPagesProducts;

	}
	
	public List<ProductFile> replaceProductFiles(ProductList prd, Map<String, ProductFile> productFiles) {
		List<ProductFile> pfs = new ArrayList<ProductFile>();
		if (prd.getProductId() != null) {
			List<ProductFile> dels = productFileRepository.findFileByProductId(prd.getProductId());
			if (dels != null && dels.size() > 0) {
				productFileRepository.delete(dels);
			}
		}
		for(ProductFile prdFile : productFiles.values()) {
			if(StringUtils.isNotBlank(prdFile.getJarMd5())) {//Can get the jar md5 info
				prdFile.setFileId(null);
				prdFile.setProduct(prd);
				prdFile.setFilePath(prdFile.getFileName());
				productFileRepository.save(prdFile);
				prdFile.setFilePath(ProductFile.getPath(prdFile.getProductId(),	prdFile.getFileId(), prdFile.getFileName()));
				productFileRepository.save(prdFile);
				pfs.add(prdFile.copy());
			}
		}
		return pfs;
	}

	@Transactional
	public List<ProductFile> updateProductFiles(ProductList prd, Map<String, ProductFile> productFiles) {
		List<ProductFile> pfs = new ArrayList<ProductFile>();
		if(null != prd.getPrimaryKey()) {//pk is set, update
			for(ProductFile prdFile : productFiles.values()) {
				if(StringUtils.isNotBlank(prdFile.getJarMd5())) {//Can get the jar md5 info
					ProductFile temp = productFileRepository.findByProductIdAndJarMd5(prd.getProductId(), prdFile.getJarMd5());
					if(null == temp) {//Only Not identity file found.
						prdFile.setFileId(null);
						prdFile.setProduct(prd);
						prdFile.setFilePath(prdFile.getFileName());
						prdFile.setFileSize(prdFile.getFileSize());
						productFileRepository.save(prdFile);
						prdFile.setFilePath(ProductFile.getPath(prdFile.getProductId(),	prdFile.getFileId(), prdFile.getFileName()));
						productFileRepository.save(prdFile);
					} else if(StringUtils.isBlank(temp.getFilePath())){
						//Maybe need to update filePath field if needed.
						temp.setFilePath(ProductFile.getPath(prd.getProductId(), temp.getFileId(), temp.getFileName()));
						productFileRepository.save(temp);
						//Used when copy files
						prdFile.setAutoScan(ProductFile.AUTOSCAN_OPEN);
						prdFile.setFilePath(temp.getFilePath());
						prdFile.setPrimaryKey(temp.getPrimaryKey());
					} else {
						prdFile.setPrimaryKey(temp.getPrimaryKey());
						prdFile.setFilePath(null);
						prdFile.setProduct(prd);
					}
					pfs.add(prdFile.copy());
				} else {//No md5 info find, find by fileUrl
					ProductFile temp = productFileRepository.findByProductIdAndFileUrl(prd.getProductId(), prdFile.getFileUrl());
					prdFile.setProduct(prd);
					if(null == temp) {//This file Url is NOT find, save it
						prdFile.setFileId(null);
						productFileRepository.save(prdFile);
						pfs.add(prdFile.copy());
					} else {
						temp.setFileName(prdFile.getFileName());
						temp.setFileUrl(prdFile.getFileUrl());
						temp.setFileSize(prdFile.getFileSize());
						temp.setFileSuffix(prdFile.getFileSuffix());
						temp.setModBy(prdFile.getModBy());
						temp.setModDate(prdFile.getModDate());
						temp.setDlCount(prdFile.getDlCount());
						temp.setOs(prdFile.getOs());
						temp.setPlatform(prdFile.getPlatform());
						temp.setPlatformVersion(prdFile.getPlatformVersion());
						temp.setResolution(prdFile.getResolution());
						temp.setScreenSize(prdFile.getScreenSize());
						temp.setPackageName(prdFile.getPackageName());
						temp.setVersionCode(prdFile.getVersionCode());
						temp.setVersionName(prdFile.getVersionName());
						temp.setSdkVersion(prdFile.getSdkVersion());
						temp.setMinSdkVersion(prdFile.getMinSdkVersion());
						temp.setTargetSdkVersion(prdFile.getTargetSdkVersion());
						temp.setIdentity(prdFile.getIdentity());
						productFileRepository.save(temp);
						pfs.add(temp.copy());
					}
				}
				
				//下线旧版本
				List<ProductFile> sameFiles = productFileRepository.findSimilarFileByProductIdAndPlatform(
						prd.getProductId(), prdFile.getPlatformId(), prdFile.getPlatformVersionId(), prdFile.getResolutionId(), ProductFile.ENABLE.intValue());
				if (sameFiles != null && sameFiles.size() > 1) {
					for (int i=0 ; i<sameFiles.size() ; i++) {
						if (i!=0) {
							ProductFile pf = sameFiles.get(i);
							pf.setStatus(ProductFile.DISABLE);
							productFileRepository.save(pf);
						}
					}
				}
				
			}
		}
		return pfs;
	}

	/**
	 * 每天例行的导库任务
	 * @param prd
	 * @param picMap
	 * @param productFiles
	 * @param productSites
	 * @param comments
	 * @return
	 */
	@Transactional
	public Product createProductWithImgAndFiles(ProductList prd,
			Map<String, ProductPic> picMap,
			Map<String, ProductFile> productFiles,
			List<ProductSiteFolder> productSites, List<MessageContent> comments) {
		Product product = new Product();
		boolean createNew = false;
		if(null == prd.getPrimaryKey()) {
			createNew = true;
			this.productListRepository.save(prd);
			//Create productStat.
			ProductState stat = getInitialProductState(prd.getProductId());
			this.productStateRepository.save(stat);
			
			product.setProductState(stat);
			product.setProductList(prd);
			
			Integer maxSortOrder = productRedisRepository.getFolderProductMaxSortOrder();
			//bind folder and product
			for(ProductSiteFolder psf : productSites) {
				psf.setProduct(prd);
				Integer sortOrder = productSiteFolderRepository.getMaxSortOrder(psf.getFolderId(), maxSortOrder);
				if(null == sortOrder) {
					sortOrder = 0;
				}
				psf.setSortOrder(sortOrder + 1);
				this.productSiteFolderRepository.save(psf);
			}
			product.setFolders(productSites);
		} else {//pk is set, update
			product.setProductState(productStateRepository.findByProductId(prd.getProductId()));
			productSites = productSiteFolderRepository.findByProductId(prd.getProductId());
			product.setFolders(productSites);
			this.productListRepository.save(prd);
			product.setProductList(prd);
		}
		if(null != comments) {
			this.updateProductComments(prd, comments);
		}
		//不需要更新solr
		List<ProductPic> pps = this.updateProductIlluImages(prd, picMap);
		List<ProductPic> ppss = new ArrayList<ProductPic>();
		//设置封面图和截图
		if (pps != null && pps.size() > 0) {
			for(ProductPic pic : pps) {
				if(pic.getPicType().intValue() == ProductPic.COVER) {
					product.setCoverPic(pic);
				} else if(pic.getPicType().intValue() == ProductPic.ICON){
					product.setIconPic(pic);
				} else if(pic.getPicType().intValue() == ProductPic.PRINT_SCREEN) {
					ppss.add(pic);
				}
			}
			if (ppss != null && ppss.size() > 0) {
				productRedisRepository.setProductPics(prd.getProductId(), ppss);
			}
		}
		//记录日志。
		if(createNew) {
			ProductOperation operation = AppStringUtils.getCreateOperation(product.getProductList(), 
					product.getCoverPic(), product.getIconPic());
			operation.setCreateBy(product.getProductList().getCreateBy());
			productOperationRepository.save(operation);
		}
		List<ProductFile> pfs = this.updateProductFiles(prd, productFiles);
		if (pfs != null && pfs.size() > 0) {
			product.setProductFiles(pfs);
		}
		return product;
	}
	
	/**
	 * 从广告主系统中导入产品，并入库
	 * @param prd
	 * @param picMap
	 * @param productFiles
	 * @param productSites
	 * @param comments
	 * @return
	 */
	@Transactional
	public Product createApiProductWithImgAndFiles(ProductList prd,
			Map<String, ProductPic> picMap,
			Map<String, ProductFile> productFiles,
			List<ProductSiteFolder> productSites, List<MessageContent> comments) {
		Product product = new Product();
		boolean createNew = false;
		if(null == prd.getPrimaryKey()) {
			createNew = true;
			this.productListRepository.save(prd);
			
			/**广告主的下载数，10000至15000*/
			ProductState stat = getInitialProductState(prd.getProductId(),
				AppStringUtils.getRandomNumber(10000, 5000));
			//初始日下载：CPC(1500-2000)－－345   CPA(1000-1500)－－－341
			//这段逻辑保持不变
			if (prd.getCooperationModelId() == 345l) {
				stat.setDailyDl(AppStringUtils.getRandomNumber(1500, 500));
			} else if (prd.getCooperationModelId() == 341l) {
				stat.setDailyDl(AppStringUtils.getRandomNumber(1000, 500));
			}
			
			this.productStateRepository.save(stat);
			product.setProductState(stat);
			product.setProductList(prd);
		} else {//pk is set, update
			product.setProductState(productStateRepository.findByProductId(prd.getProductId()));
			product.setFolders(productSites);
			this.productListRepository.save(prd);
			product.setProductList(prd);
		}
		if(null != comments) {
			this.updateProductComments(prd, comments);
		}
		//不需要更新solr
		
		//更新产品频道
		productSites = this.updateProductSiteFolders(prd, productSites);
		product.setFolders(productSites);
		
		List<ProductPic> pps = this.updateApiProductIlluImages(prd, picMap);
		List<ProductPic> ppss = new ArrayList<ProductPic>();
		//设置封面图和截图
		if (pps != null && pps.size() > 0) {
			for(ProductPic pic : pps) {
				if(pic.getPicType().intValue() == ProductPic.COVER) {
					product.setCoverPic(pic);
				} else if(pic.getPicType().intValue() == ProductPic.ICON){
					product.setIconPic(pic);
				} else if(pic.getPicType().intValue() == ProductPic.PRINT_SCREEN) {
					ppss.add(pic);
				}
			}
		}
		//记录日志。
		if(createNew) {
			ProductOperation operation = AppStringUtils.getCreateOperation(product.getProductList(), 
					product.getCoverPic(), product.getIconPic());
			operation.setCreateBy(product.getProductList().getCreateBy());
			productOperationRepository.save(operation);
		}
		List<ProductFile> pfs = this.replaceProductFiles(prd, productFiles);
		if (pfs != null && pfs.size() > 0) {
			product.setProductFiles(pfs);
		}
		return product;
	}
	
	@Transactional
	public List<ProductPic> updateApiProductIlluImages(ProductList prd, Map<String, ProductPic> picMap) {
		if(null != prd.getPrimaryKey()) {//pk is set, update
			List<ProductPic> pps = new ArrayList<ProductPic>();
			
			//删除原有截图
			productPicRepository.deleteByProductIdAndPicType(prd.getProductId(), ProductPic.PRINT_SCREEN);
			//save product imgs.
			for(Map.Entry<String, ProductPic> entry : picMap.entrySet()) {
				ProductPic productPic = entry.getValue();
				if(null != productPic) {
					productPic.setProduct(prd);
					if(productPic.getPicType().intValue() == ProductPic.PRINT_SCREEN) {//截图
						productPic.initDefaultValues();
						productPic.setCreateBy(prd.getCreateBy());
						productPic.setPicPath("temp");
						productPicRepository.save(productPic);
						productPic.setPicPath(ProductPic.getPath(productPic.getPrimaryKey(), productPic.getPicStyle()));
						productPicRepository.save(productPic);
					} else {//封面或者图标，更新
						List<ProductPic> picList = productPicRepository.findByProductIdAndPicType(prd.getProductId(), productPic.getPicType());
						if(null != picList && picList.size() > 0) {
							ProductPic productPicOrg = picList.get(0);
							String org_md5 = "";
							String new_md5 = "";
							if (StringUtils.isNotEmpty(productPicOrg.getJarMd5())){
								org_md5 = productPicOrg.getJarMd5();
							}
							if (StringUtils.isNotEmpty(productPic.getJarMd5())){
								new_md5 = productPic.getJarMd5();
							}
							if (!new_md5.equals("") && !org_md5.equals(new_md5)){
								productPicRepository.deleteByProductIdAndPicType(prd.getProductId(), productPic.getPicType());
								
								productPic.setPicPath("temp");
								productPic.setCreateBy(prd.getCreateBy());
								productPic.initDefaultValues();
								productPicRepository.save(productPic);
								productPic.setPicPath(ProductPic.getPath(productPic.getProductPicId(), productPic.getPicStyle()));
								productPicRepository.save(productPic);
							} else {
								productPic = productPicOrg;
							}
						} else {
							productPic.setPicPath("temp");
							productPic.setCreateBy(prd.getCreateBy());
							productPic.initDefaultValues();
							productPicRepository.save(productPic);
							productPic.setPicPath(ProductPic.getPath(productPic.getProductPicId(), productPic.getPicStyle()));
							productPicRepository.save(productPic);
						}
					}
					pps.add(productPic.copy());
				}
			}
			
			return pps;
		}
		return null;
	}
	
	/**
	 * 更新产品频道
	 * @param productList
	 * @param productSiteFolders
	 * @return
	 */
	public List<ProductSiteFolder> updateProductSiteFolders(ProductList productList, List<ProductSiteFolder> productSiteFolders) {
		
		//删除原频道
		List<ProductSiteFolder> productSites_ = productSiteFolderRepository.findByProductId(productList.getProductId());
		if (productSites_ != null && productSites_.size() > 0 && productSiteFolders != null && productSiteFolders.size() > 0) {
			for (ProductSiteFolder psf_ : productSites_) {
				for (ProductSiteFolder psf : productSiteFolders) {
					if (psf_.getFolderId() == psf.getFolderId()) {
						productSites_.remove(psf_);
						productSiteFolders.remove(psf);
					}					
					if (productSiteFolders.size() <= 0) {
						break;
					}
				}
				if (productSites_.size() <= 0) {
					break;
				}
			}
		}

		if (productSites_ != null && productSites_.size() > 0) {
			
			/**删除原频道绑定关系时，需要把对应推荐库中的内容也删除掉*/
			for(ProductSiteFolder psf : productSites_){
				
				this.productDetailRepository.deleteBySiteIdAndProductId(psf.getSiteId(),psf.getProductId());
			
			}
			
			productSiteFolderRepository.delete(productSites_);
		}
		
		if (productSiteFolders != null && productSiteFolders.size() > 0) {
			Integer maxSortOrder = productRedisRepository.getFolderProductMaxSortOrder();
			for(ProductSiteFolder psf : productSiteFolders) {
				psf.setProduct(productList);
				Integer sortOrder = productSiteFolderRepository.getMaxSortOrder(psf.getFolderId(), maxSortOrder);
				if(null == sortOrder) {
					sortOrder = 0;
				}
				psf.setSortOrder(sortOrder + 1);
				this.productSiteFolderRepository.save(psf);
				
				/**将其添加到推荐库中*/
				ProductDetail pd = new ProductDetail();
				pd.setProduct(psf.getProduct());
				pd.setSite(psf.getSite());
				pd.setRecommendStorage(RecommendStorageEnum.YES.ordinal());
				
				this.productDetailRepository.save(pd);
				//-----------
			}
		}
		
		return productSiteFolderRepository.findByProductId(productList.getProductId());
	}
	
	/**
	 * 初始化产品下载数
	 * @param productId
	 * @param totalDl 总下载数
	 * @return
	 */
	private ProductState getInitialProductState(Long productId,long totalDl) {
		ProductState stat = new ProductState(productId);
		stat.initDefaultValues();
		
		stat.setTotalDl(totalDl);
		stat.setTotalPv((long)(totalDl*1.5));
		
		stat.setMonthPv(stat.getTotalPv());
		stat.setWeekPv(stat.getTotalPv());
		stat.setWeekDl(stat.getTotalDl());
		stat.setMonthDl(stat.getTotalDl());
		return stat;
	}
	
	/**
	 * 产品默认下载数5000－10000
	 * @param productId
	 * @return
	 */
	private ProductState getInitialProductState(Long productId) {
		long totalDl = AppStringUtils.getRandomNumber(5000, 5000);
		return getInitialProductState(productId,totalDl);
	}

	@Transactional
	public List<ProductPic> updateProductIlluImages(ProductList prd, Map<String, ProductPic> picMap) {
		if(null != prd.getPrimaryKey()) {//pk is set, update
			List<ProductPic> pps = new ArrayList<ProductPic>();
			
			//删除原有截图
			productPicRepository.deleteByProductIdAndPicType(prd.getProductId(), ProductPic.PRINT_SCREEN);
			//save product imgs.
			for(Map.Entry<String, ProductPic> entry : picMap.entrySet()) {
				ProductPic productPic = entry.getValue();
				if(null != productPic) {
					productPic.setProduct(prd);
					if(productPic.getPicType().intValue() == ProductPic.PRINT_SCREEN) {//截图
						productPic.initDefaultValues();
						productPic.setCreateBy(prd.getCreateBy());
						productPic.setPicPath("temp");
						productPicRepository.save(productPic);
						productPic.setPicPath(ProductPic.getPath(productPic.getPrimaryKey(), productPic.getPicStyle()));
						productPicRepository.save(productPic);
					} else {//封面或者图标，更新
						List<ProductPic> picList = productPicRepository.findByProductIdAndPicType(prd.getProductId(), productPic.getPicType());
						if(null != picList && picList.size() > 0) {
							productPic = picList.get(0);
						} else {
							productPic.setPicPath("temp");
							productPic.setCreateBy(prd.getCreateBy());
							productPic.initDefaultValues();
							productPicRepository.save(productPic);
							productPic.setPicPath(ProductPic.getPath(productPic.getProductPicId(), productPic.getPicStyle()));
							productPicRepository.save(productPic);
						}
					}
					pps.add(productPic.copy());
				}
			}
			
			return pps;
		}
		return null;
	}

	/**
	 * 更新产品评论。需要更新数据库与redis，不需要更新搜索。
	 * @param prd
	 * @param comments
	 */
	@Transactional
	public void updateProductComments(ProductList prd, List<MessageContent> comments) {
		if(null != prd.getPrimaryKey() && null != comments) {//pk is set, update
			//更新/创建产品评论
			MessageContent entity = null;
			for(MessageContent comment: comments) {
				if(StringUtils.isNotBlank(comment.getContent())) {//omit null content message.
					entity = messageContentRepository.findBySourceMessageIdAndSourceProductId(comment.getSourceMessageId(), comment.getSourceProductId());
					if(null == entity) {//Not find the comment, just save it.
						comment.setProductId(prd.getPrimaryKey());
						comment.setStatus(MessageContent.StatusEnum.Enable.getValue());
						comment.setMessageType(MessageContent.MessageTypeEnum.Comment.getValue());
						
						if(null == comment.getCreateDate()) {
							comment.setCreateDate(new Date());
						}
						messageContentRepository.save(comment);
					}
				}
			}
		}		
	}

	/**
	 * 产品重新关联频道，需要更新数据库、redis与搜索
	 * @param prd
	 * @param list
	 */
	@Transactional
	public List<ProductSiteFolder> updateProductFolders(ProductList prd, List<Folder> folders) {
		if(null != prd && null != folders && folders.size() > 0) {
			List<ProductSiteFolder> list = productSiteFolderRepository.findByProductId(prd.getPrimaryKey());
			for(ProductSiteFolder psf : list) {
				this.productSiteFolderRepository.delete(psf);
				//删除redis中的数据
				this.deleteFolderProduct(psf);
			}
			Product product = this.productRedisRepository.getProductByProductId(prd.getProductId(), false);
			if(null != product.getFolders()) {
				product.getFolders().clear();
			}
			//清除数据
			list.clear();
			Integer maxSortOrder = this.productRedisRepository.getFolderProductMaxSortOrder();
			for(Folder f : folders) {
				ProductSiteFolder psf = new ProductSiteFolder();
				psf.setFolder(f);
				psf.setSite(f.getSite());
				psf.setCreateBy(prd.getCreateBy());
				psf.setCreateDate(new Date());
				psf.setProduct(prd);
				product.addProductSiteFolder(psf);
				list.add(psf);
				
				Integer sortOrder = productSiteFolderRepository.getMaxSortOrder(psf.getFolderId(), maxSortOrder);
				if(null == sortOrder) {
					sortOrder = 0;
				}
				psf.setSortOrder(sortOrder + 1);
				this.productSiteFolderRepository.save(psf);
				//更新redis
				this.redisAddFolderProduct(psf);
			}
			return list;
		}	
		return null;
	}
	
	@Transactional
	public void saveProductFile(ProductFile productFile) {
		if(StringUtils.isBlank(productFile.getFilePath())) {//The file path is NOT set.
			productFile.setFilePath("temp");
			
			this.productFileRepository.save(productFile);//先保存，以获得文件ID？
			productFile.setFilePath(ProductFile.getPath(productFile.getProductId(), productFile.getFileId(), productFile.getFileName()));
		}
		this.productFileRepository.save(productFile);
		ProductOperation operation = AppStringUtils.getUploadFileOperation(productFile);
		operation.setCreateBy(productFile.getModBy());
		this.productOperationRepository.save(operation);
	}

	/**
	 * 产品文件换包
	 * @param productFile
	 */
	public void saveReplacedProductFile(ProductFile productFile) {
		if(StringUtils.isBlank(productFile.getFilePath())) {//The file path is NOT set.
			productFileRepository.save(productFile);//Only save to get fileId
			productFile.setFilePath(ProductFile.getPath(productFile.getProductId(), 
					productFile.getFileId(), productFile.getFileName()));
		}
		productFile.setModBy(AccountContext.getAccountContext().getUsername());
		productFile.setModDate(new Date());
		this.productFileRepository.save(productFile);
		ProductOperation operation = AppStringUtils.getChangeFileOperation(productFile);
		operation.setCreateBy(productFile.getModBy());
		this.productOperationRepository.save(operation);		
	}

	/**
	 * 删除产品文件
	 * @param productFile
	 */
	public void deleteProductFile(ProductFile productFile, String userName) {
		productFile.setModBy(userName);
		productFile.setModDate(new Date());
		productFile.setStatus(ProductFile.DISABLE);
		this.productFileRepository.save(productFile);
		ProductOperation operation = AppStringUtils.getDeleteFileOperation(productFile);
		operation.setCreateBy(userName);
		this.productOperationRepository.save(operation);
	}
	

	public void onlineProductFile(ProductFile productFile, String userName) {
		productFile.setModBy(userName);
		productFile.setModDate(new Date());
		productFile.setStatus(ProductFile.ENABLE);
		this.productFileRepository.save(productFile);
		ProductOperation operation = AppStringUtils.getOnlineFileOperation(productFile);
		operation.setCreateBy(userName);
		this.productOperationRepository.save(operation);
	}
	
	/**
	 * 批量绑定频道产品
	 * @param del
	 * @param save
	 */
	@Transactional
	public void bindFolderProducts(List<ProductSiteFolder> del, List<ProductSiteFolder> save){
		if (del != null && del.size() >0) {
			this.productSiteFolderRepository.delete(del);
		}
		if (save != null && save.size() > 0) {
			this.productSiteFolderRepository.save(save);
		}
	}
	
	public void publishRecommendRuleToRedis(List<ProductSiteFolder> psfs , Long productId) {		
		for (ProductSiteFolder psf : psfs) {
			RecommendRule rr = this.getProductRecommendRule(psf.getSiteId(), productId);
			if (rr != null) {
				this.setRecommendRule2Redis(psf.getSiteId(), productId, rr);
				this.setRecommendData2Redis(psf.getSiteId(), productId, rr);
			}
		}
		
	}
	
	public RecommendRule getProductRecommendRule(Integer siteId, Long productId) {
		RecommendRule rr = recommendRuleRepository.findByProductIdAndSiteId(productId, siteId);
		if (rr == null) {
			ProductSiteFolder p = productSiteFolderRepository.findBySiteIdAndProductId(siteId, productId);
			if (p != null) {
				rr = recommendRuleRepository.findByFolderId(p.getFolderId());
			} else {
				return null;
			}
		}
		if (rr == null) {
			rr = recommendRuleRepository.findBySiteIdAndType(siteId, RecommendRule.TYPE_SYSTEM);
		}		
		return rr;
	}
	
	/**
	 * 发布产品智能推荐结构
	 * @param productId
	 */
	public void setRecommendRule2Redis(Integer siteId, Long productId, RecommendRule rr) {
		
		ProductIntelligentRecommend pir = copyToIntelligentRecommend(rr);
		
		productRedisRepository.setIntelligentRecommend(siteId, productId, pir);
	}
	
	/**
	 * 发布推荐算法数据
	 * @param productId
	 */
	public void setRecommendData2Redis(Integer siteId, Long productId, RecommendRule rr){
		ProductSiteRecommend par = productSiteRecommendRepository.findByProductIdAndSiteId(productId, siteId);
		if (par != null) {
			
			//取得对应算法数据
			Integer behavior_type = rr.getBehaviorId();
			String behavior_str = "";
			switch (behavior_type.intValue()) {
				case 1:
					behavior_str = par.getBehaviors1();
					break;
				case 2:
					behavior_str = par.getBehaviors2();
					break;
				case 3:
					behavior_str = par.getBehaviors3();
					break;
				case 4:
					behavior_str = par.getBehaviors4();
					break;
				case 5:
					behavior_str = par.getBehaviors5();
					break;
			}
			productRedisRepository.setProductRecommendBehaviors(siteId, productId, AppStringUtils.formatStringArrayToLongList(behavior_str, ","));
			
			productRedisRepository.setProductRecommendSimilars(siteId, productId, AppStringUtils.formatStringArrayToLongList(par.getSimilars(), ","));
		}
	}
	
	/**
	 * 发布推荐库产品
	 * @param siteId
	 */
	public void publishRecmmendStorage(Integer siteId){
		productRedisRepository.clearProductRecommendStorage(siteId);
		
		List<ProductList> productLists = productListRepository.findStorageProductBySiteId(siteId);
		if (productLists != null && productLists.size() > 0) {
			for (ProductList productList : productLists) {
				productRedisRepository.addProductRecommendStorage(siteId, productList.getProductId());
			}
		}
	}
	
	/**
	 * 
	 * @param productId
	 * @return
	 */
	public List<IntelligentItemRecommend> getIntelligentItemRecommends(Integer siteId, ProductList productList) {
		IntelligentItemRecommend[] iir = new IntelligentItemRecommend[4];
		ProductIntelligentRecommend pir = productRedisRepository.getIntelligentRecommend(siteId, productList.getProductId());
		if (pir != null) {
			IntelligentItemRecommend behavior = new IntelligentItemRecommend();
			IntelligentItemRecommend similar = new IntelligentItemRecommend();
			IntelligentItemRecommend storage = new IntelligentItemRecommend();
			IntelligentItemRecommend manual = new IntelligentItemRecommend();
			
			List<Long> behaviors = productRedisRepository.getProductRecommendBehaviors(siteId, productList.getProductId());
			if (behaviors != null && behaviors.size() > 0) {
				behavior.setProductIds(randomProductids(behaviors, pir.getBehavior().getDisNum()));
			}
			behavior.setName(pir.getBehavior().getName());
			
			List<Long> similars = productRedisRepository.getProductRecommendSimilars(siteId, productList.getProductId());
			if (similars != null && similars.size() > 0) {
				similar.setProductIds(randomProductids(similars, pir.getSimilar().getDisNum()));
			}
			similar.setName(pir.getSimilar().getName());
			
			List<Long> storagess = new ArrayList<Long>();
			if (productList.getFolders() != null && productList.getFolders().size() > 0) {
				storagess = productRedisRepository.getProductRecommendStorage(productList.getFolders().get(0).getSiteId(),10);
			}
			if (storagess != null && storagess.size() > 0) {
				storage.setProductIds(randomProductids(storagess, pir.getStorage().getDisNum()));
			}
			storage.setName(pir.getStorage().getName());
			if (pir.getManual() != null && pir.getManual().getProductIds() != null) {
				manual.setProductIds(randomProductids(pir.getManual().getProductIds(), pir.getManual().getDisNum()));	
			}
			manual.setName(pir.getManual().getName());
			
			iir[pir.getBehavior().getSequence()-1] = behavior;
			iir[pir.getSimilar().getSequence()-1] = similar;
			iir[pir.getStorage().getSequence()-1] = storage;
			iir[pir.getManual().getSequence()-1] = manual;
		}
		List<IntelligentItemRecommend> rtn_iir = Arrays.asList(iir);
		return rtn_iir;
	}
	
	public List<Long> randomProductids(List<Long> productids, int num){
		if (productids != null && productids.size() > 0) {
			List<Long> rtns = new ArrayList<Long>();
			int total = productids.size();
			Object[] intR = AppStringUtils.getRandomNumbers(num, total-1);
			if (intR == null) {
				return productids;
			}
			for(int i = 0;i < intR.length; i++){
				rtns.add(productids.get(new Integer(intR[i] + "")));
			}
			return rtns;
		}
		return null;
	}
	
	/**
	 * 
	 * @param recommendRule
	 * @return
	 */
	public ProductIntelligentRecommend copyToIntelligentRecommend(RecommendRule recommendRule){
		ProductIntelligentRecommend pir = new ProductIntelligentRecommend();
		IntelligentItemRecommend behavior = new IntelligentItemRecommend();
		IntelligentItemRecommend similar = new IntelligentItemRecommend();
		IntelligentItemRecommend storage = new IntelligentItemRecommend();
		IntelligentItemRecommend manual = new IntelligentItemRecommend();
		
		behavior.setSequence(recommendRule.getBehaviorSeq());
		behavior.setDisNum(recommendRule.getBehaviorNum());
		behavior.setRandom(true);
		behavior.setName(RecommendRuleTypeEnum.Behavior.getSuffix());
		
		similar.setSequence(recommendRule.getSimilarSeq());
		similar.setDisNum(recommendRule.getSimilarNum());
		similar.setRandom(true);
		similar.setName(RecommendRuleTypeEnum.Similar.getSuffix());
		
		storage.setSequence(recommendRule.getStorageSeq());
		storage.setDisNum(recommendRule.getStorageNum());
		storage.setRandom(true);
		storage.setName(RecommendRuleTypeEnum.Storage.getSuffix());
		
		manual.setSequence(recommendRule.getManualSeq());
		manual.setDisNum(recommendRule.getManualNum());
		manual.setRandom(true);
		
		if(recommendRule.getManualIds() != null){
			recommendRule.setManualIds(recommendRule.getManualIds().replace("，", ","));
		}
		
		manual.setProductIds(AppStringUtils.formatStringArrayToLongList(recommendRule.getManualIds(), ","));
		manual.setName(RecommendRuleTypeEnum.Manual.getSuffix());
		
		pir.setBehavior(behavior);
		pir.setSimilar(similar);
		pir.setStorage(storage);
		pir.setManual(manual);
		
		return pir;
	}
	
    /**
     * 删除操作
     * @param recommendRule
     */
    @Transactional
    public void deleteRecommendRule (RecommendRule recommendRule) {
		//处理产品
		if (recommendRule.getType() == RecommendRule.TYPE_PRODUCT.intValue()) {
			recommendRuleRepository.delete(recommendRule);
		
			//处理频道
		} else if (recommendRule.getType() == RecommendRule.TYPE_FOLDER.intValue()) {
			
			Long folderId = recommendRule.getFolderId();
			recommendRuleRepository.delete(recommendRule);
			List<ProductSiteFolder> list = productSiteFolderRepository.findByFolderId(folderId);
			if(null != list && list.size() > 0) {
				for (ProductSiteFolder psf : list) {
					RecommendRule rr = getProductRecommendRule(psf.getSiteId(), psf.getProductId());
					if (rr != null) {
	        			setRecommendRule2Redis(psf.getSiteId(), psf.getProductId(),rr);
	        			setRecommendData2Redis(psf.getSiteId(), psf.getProductId(), rr);
					}
				}
			}
		}
    }
    
    /**
     * 删除操作
     * @param recommendRule
     */
    @Transactional
    public void deleteRecommendRuleAcross (RecommendRuleAcross recommendRuleAcross) {
    	recommendRuleAcrossRepository.delete(recommendRuleAcross);
    	recommendRuleAcrossRedisRepository.deleteRecommendRuleAcross(recommendRuleAcross, null);
    }
    

    
    /**
     * 保存file apk info
     * @param productFile
     */
    public void saveProductFileApkInfo(ProductFile productFile) {
    	String filePath = productFile.getFilePath();
    	if (StringUtils.isNotEmpty(filePath)) {
    		filePath = systemPreference.getProductFileRoot() + filePath;
        	ProductFile apkInfo = this.getProductFileApkInfo(filePath);
        	if (apkInfo != null) {
        		productFile.setPackageName(apkInfo.getPackageName());
        		productFile.setVersionCode(apkInfo.getVersionCode());
        		productFile.setVersionName(apkInfo.getVersionName());
                productFile.setSdkVersion(apkInfo.getSdkVersion());
                productFile.setMinSdkVersion(apkInfo.getMinSdkVersion());
                productFile.setTargetSdkVersion(apkInfo.getTargetSdkVersion());
                productFile.setIdentity(apkInfo.getIdentity());
        	} else {
        		productFile.setPackageName(null);
        		productFile.setVersionCode(null);
        		productFile.setVersionName(null);
                productFile.setSdkVersion(null);
                productFile.setMinSdkVersion(null);
                productFile.setTargetSdkVersion(null);
                productFile.setIdentity(null);
        	}
            productFileRepository.save(productFile);
    	}
    }
    
    /**
     * 获取APK文件签名信息
     * @param filePath
     */
    public ProductFile getProductFileApkInfo(String filePath) {
    	try {
    		if (StringUtils.isNotEmpty(filePath)) {
    	    	HashMap<String,String> map = new HashMap<String,String>();
    			map.put("path", filePath);
    	    	String rtn_value = HttpClientUtil.httpPost(systemPreference.getAppApkInfo() + "app/apk/info", map);
    	    	
    	    	ObjectMapper objectMapper = new ObjectMapper();
    	    	DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    	    	objectMapper.setDateFormat(df);
    	    	objectMapper.getDeserializationConfig().disable(Feature.FAIL_ON_UNKNOWN_PROPERTIES);
    	    	ProductFile productFile = new ProductFile();
    	    	if (StringUtils.isNotEmpty(rtn_value)) {
    	    		productFile = objectMapper.readValue(rtn_value, new TypeReference<ProductFile>() {});
    	    		return productFile;
    	    	}
    		}
		} catch (JsonGenerationException e) {
			logger.error(e.getMessage(), e);
		} catch (JsonMappingException e) {
			logger.error(e.getMessage(), e);
		} catch (IOException e) {
			logger.error(e.getMessage(), e);
		}
    	return null;
    }

    /**
     * 取得productFile ApkInfo
     * @return
     */
	public void setProductFileApkInfo(List<ProductFile> productFiles) {
		if (productFiles != null && productFiles.size() > 0) {
			Map<String, ProductFile> hm = new HashMap<String, ProductFile>();
			for (ProductFile pf : productFiles) {
				if (!StringUtils.isEmpty(pf.getPackageName())
						&& !StringUtils.isEmpty(pf.getIdentity())
						&& pf.getVersionCode() != null && pf.getVersionCode().intValue() > 0) {
					String key = pf.getPackageName() + pf.getIdentity();
					if (hm.containsKey(key)) {
						ProductFile pf_ = hm.get(key);
						if (pf_.getVersionCode() < pf.getVersionCode()) {
							hm.put(key, pf);
						}
					} else {
						hm.put(key, pf);
					}
				}
			}
			
			if (hm.size() > 0) {
				for (Map.Entry<String, ProductFile> entry : hm.entrySet()) {
					apuService.setProductFileApkInfo(entry.getValue());
				}
			}
		}
	}
	
	/**
	 * 将定时列表转化为可发布的列表
	 * @param taskList
	 * @param page
	 * @return
	 */
	public List<ProductContainer> getPcListFromTaskList(List<ProductContainerTask> taskList, HtmlPage page){
		List<ProductContainer> pcList = new ArrayList<ProductContainer>();
	
		//将ProductContainerTask转化为ProductContainer
		for(ProductContainerTask pct : taskList){
			ProductContainer pc = new ProductContainer();
			//复制已有的信息
			pc.setContainer(this.recommandContainerRepository.findOne(pct.getContainerId()));
			pc.setType(pct.getType());
			//类型
			if(pct.getType() == 1){
				pc.setProduct(this.productListRepository.findByProductId(pct.getProductId()));
			}else if(pct.getType() == 2){
				pc.setTfolder(this.folderRepository.findByFolderId(pct.getTfolderId()));
			}else {
				pc.setAdvertise(this.advertiseRepository.findByAdvertiseId(pct.getAdvertiseId()));
			}
			
			pc.setStatus(pct.getStatus());
			pc.setSortOrder(pct.getSortOrder());
			pc.setCreateBy(pct.getCreateBy());
			pc.setCreateDate(pct.getCreateDate());
			pc.setModBy(pct.getModBy());
			pc.setModDate(pct.getModDate());
			
			//设置站点，频道，页面等信息
			pc.setSite(this.siteRepository.findOne(page.getSiteId()));
			pc.setFolder(this.folderRepository.findByFolderId(page.getFolderId()));
			pc.setPage(page);
			//为pc生成一个惟一的ID
			pc.setProductContainerId(Long.valueOf((pct.getDisplayDate()+""+pct.getPrimaryKey())));
			
			pcList.add(pc);
			
		}
		
		return pcList;
	}
	
    /**
     * 添加跳转链接
     * @param fileUrl
     * @param fileName
     * 
     * return SoupengId
     */
    public String addSoupengUrl(String fileName, String fileUrl) {
    	if (StringUtils.isNotEmpty(fileName) && StringUtils.isNotEmpty(fileUrl)) {
    		StringBuffer query = new StringBuffer();
    		query.append("sid=").append(systemPreference.getSoupengSid());
    		try {
				query.append("&url=").append(URLEncoder.encode(fileUrl, "utf-8"));
				query.append("&name=").append(URLEncoder.encode(fileName, "utf-8"));
			} catch (UnsupportedEncodingException e) {
				logger.error(e.getMessage(), e);
			}
    		//signature
    		String signature = EncryptionUtil.getMD5(query.toString() + systemPreference.getSoupengAppkey());
    		
    		query.append("&signature=").append(signature);
    		String soupeng_url = HttpClientUtil.httpGetSoupeng(systemPreference.getSoupengApiAdd() + "?" + query.toString());
    		if (StringUtils.isNotEmpty(soupeng_url)) {
    			String url[] = soupeng_url.split("/");
    			if (url.length > 0) {
    				int len = url.length;
    				return url[len-1];
    			}
    		}
    	}
    	return "";
    }
    
    /**
     * 更新跳转链接
     * @param filePath
     * @param fileName
     */
    public String updateSoupengUrl(String filePath, String fileName, String fileUrl) {
    	if (StringUtils.isNotEmpty(filePath)) {
    		StringBuffer query = new StringBuffer();
    		query.append("sid=").append(systemPreference.getSoupengSid());
    		query.append("&id=").append(filePath);
    		try {
    			if (StringUtils.isNotEmpty(fileUrl)) {
					query.append("&url=").append(URLEncoder.encode(fileUrl, "utf-8"));
    			}
	    		if (StringUtils.isNotEmpty(fileName)) {
	        		query.append("&name=").append(URLEncoder.encode(fileName, "utf-8"));
	    		}
			} catch (UnsupportedEncodingException e) {
				logger.error(e.getMessage(), e);
			}
    		
    		//signature
    		String signature = EncryptionUtil.getMD5(query.toString() + systemPreference.getSoupengAppkey());
    		
    		query.append("&signature=").append(signature);
    		String soupeng_url = HttpClientUtil.httpGetSoupeng(systemPreference.getSoupengApiUpdate() + "?" + query.toString());
    		if (StringUtils.isNotEmpty(soupeng_url)) {
    			String url[] = soupeng_url.split("/");
    			if (url.length > 0) {
    				int len = url.length;
    				return url[len-1];
    			}
    		}
    	}
    	
    	return "";
    }

}